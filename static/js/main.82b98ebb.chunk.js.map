{"version":3,"sources":["components/Solver.jsx","components/question.jsx","components/EmptyCell.jsx","components/Maze.jsx","index.js"],"names":["solveMazeUtil","maze","x","y","sol","length","isSafe","solveMaze","Array","l","fill","solved","solution","array","count","i","row","j","push","random","Math","floor","round","console","log","question","answer","list","res","Solver","Found","NonEmptyCell","Box","height","bgcolor","width","display","border","RatCell","src","alt","CheeseCell","EmptyCell","creatMaze","matix","mazeList","cellList","uuidv1","Grid","container","item","xs","Maze","ReactDOM","render","className","toString","document","getElementById"],"mappings":"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","file":"static/js/main.82b98ebb.chunk.js","sourcesContent":["function isSafe(maze, x, y) {\r\n    const length = maze.length;\r\n    return x < length && y < length && maze[x][y] === 1;\r\n}\r\n\r\nfunction solveMazeUtil(maze, x, y, sol) {\r\n    const length = maze.length;\r\n    if (x === length - 1 && y === length - 1) {\r\n        sol[x][y] = 1;\r\n        return true;\r\n    }\r\n    if (isSafe(maze, x, y)) {\r\n        sol[x][y] = 1;\r\n        if (solveMazeUtil(maze, x + 1, y, sol)) return true;\r\n        if (solveMazeUtil(maze, x, y + 1, sol)) return true;\r\n        sol[x][y] = 0;\r\n        return false;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction solveMaze(maze) {\r\n    const sol = new Array(maze.length);\r\n    for (let l = 0; l < maze.length; l++) {\r\n        sol[l] = new Array(maze.length).fill(0);\r\n    }\r\n    return solveMazeUtil(maze, 0, 0, sol) ? {solved: true, solution: sol} : {solved: false, solution: sol};\r\n}\r\n\r\n\r\n\r\nexport function Solver(list) {\r\n    const res = solveMaze(list);\r\n    console.log(res.solved);\r\n    return res.solution;\r\n}\r\n\r\nexport function BoolSolve(list) {\r\n    const res = solveMaze(list);\r\n    return res.solved;\r\n}","import {BoolSolve, Solver} from \"./Solver\";\r\n\r\nconst array = [];\r\nlet count = 0;\r\nfor (let i = 0; i < 4; i++){\r\n    let row = [];\r\n    for (let j = 0; j < 4; j++) {\r\n        if (i === 0 && j === 0 || i === 3 && j === 3) {\r\n            row.push(1)\r\n        } else {\r\n            let random = Math.floor(Math.round(Math.random()));\r\n            if (random === 0){\r\n                count++;\r\n            }\r\n            row.push((count<=5)? random: 1)\r\n        }\r\n    }\r\n    array.push(row)\r\n}\r\n\r\nconsole.log(\"ARRAY\")\r\nconsole.log(array)\r\n\r\nexport const question = array\r\n\r\nexport const answer = Solver(question)\r\n\r\nexport const Found = BoolSolve(question)","import {Box} from \"@material-ui/core\";\r\n\r\nfunction EmptyCell() {\r\n    return <Box height={100} bgcolor=\"white\" width={110} display=\"inline-block\" border={1}>\r\n    </Box>;\r\n}\r\n\r\nexport const NonEmptyCell = () => <Box height={100} bgcolor=\"red\" width={110} display=\"inline-block\" border={1}>\r\n</Box>;\r\n\r\nexport const RatCell = () => <Box height={100} bgcolor=\"white\" width={110} display=\"inline-block\" border={1}>\r\n    <img src=\"https://purepng.com/public/uploads/large/purepng.com-jerry-tom-and-jerrytom-and-jerrytomjerryanimated-seriesin-1940characters-1701528659491ynpug.png\" height={100}  alt=\"No\"/>\r\n</Box>;\r\n\r\nexport const CheeseCell = () => <Box height={100} bgcolor=\"white\" width={110} display=\"inline-block\" border={1}>\r\n    <img src=\"https://www.ecosystemmarketplace.com/wp-content/uploads/2019/11/Swiss-Cheese.jpg\" height={90}  alt=\"No\"/>\r\n</Box>;\r\n\r\n\r\nexport default EmptyCell;","// import {Grid} from '@material-ui/core';\r\n// import {v1 as uuidv1} from 'uuid';\r\n// import EmptyCell, {NonEmptyCell, RatCell, CheeseCell} from \"./EmptyCell\";\r\nimport {answer, question} from \"./question\";\r\nimport EmptyCell, {CheeseCell, NonEmptyCell, RatCell} from \"./EmptyCell\";\r\nimport {v1 as uuidv1} from \"uuid\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nfunction creatMaze(matix) {\r\n    const mazeList = []\r\n    for(let i = 0; i < 4; i++){\r\n        const cellList = []\r\n        for (let j = 0; j < 4; j++) {\r\n            if(matix[i][j] === 1){\r\n                if (i === 0 && j === 0) {\r\n                    cellList.push(<RatCell key={uuidv1()} />)\r\n                }\r\n                else if (i === 3 && j === 3) {\r\n                    cellList.push(<CheeseCell key={uuidv1()} />)\r\n                }\r\n                else if (i < 4) {\r\n                    cellList.push(<EmptyCell key={uuidv1()}/>)\r\n                }\r\n            }\r\n            else {\r\n                cellList.push(<NonEmptyCell key={uuidv1()}/>)\r\n            }\r\n        }\r\n        mazeList.push(<Grid key={uuidv1()} container item xs={12}>{cellList}</Grid>)\r\n    }\r\n    return (\r\n        <div>\r\n            {mazeList}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Maze() {\r\n    return <div>\r\n        {creatMaze(question)}\r\n        <br/>\r\n        {creatMaze(answer)}\r\n    </div>\r\n}\r\n\r\nexport default Maze;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Maze from './components/Maze'\nimport {Found} from \"./components/question\";\n\nReactDOM.render(\n    <div>\n        <div className=\"centered\">\n            <Maze />\n        </div>\n        <p className=\"centered\" >Path Found = {Found.toString()}</p>\n    </div>\n    ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}